apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'robolectric'

dependencies {
  compile 'com.android.support:support-v4:21.0.0'
  compile "org.jetbrains.kotlin:kotlin-stdlib:0.9.66"
  compile 'com.google.guava:guava:18.0'

  // Workaround for stupid bug in robolectric
  androidTestCompile 'junit:junit:4.10'
  androidTestCompile ('org.robolectric:robolectric:2.3') {
    exclude module: 'classworlds'
    exclude module: 'maven-artifact'
    exclude module: 'maven-artifact-manager'
    exclude module: 'maven-error-diagnostics'
    exclude module: 'maven-model'
    exclude module: 'maven-plugin-registry'
    exclude module: 'maven-profile'
    exclude module: 'maven-project'
    exclude module: 'maven-settings'
    exclude module: 'nekohtml'
    exclude module: 'plexus-container-default'
    exclude module: 'plexus-interpolation'
    exclude module: 'plexus-utils'
    exclude module: 'wagon-file'
    exclude module: 'wagon-http-lightweight'
    exclude module: 'wagon-http-shared'
    exclude module: 'wagon-provider-api'
    exclude group: 'com.android.support', module: 'support-v4'
  }
}

android {
  compileSdkVersion 21
  buildToolsVersion '21.1.0'

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src/main/java']
      java.srcDirs += 'src/main/kotlin'
    }

    androidTest {
      setRoot('src/test')
      java.srcDirs += 'src/test/kotlin'
    }

    debug.setRoot('build-types/debug')
    release.setRoot('build-types/release')
      main.java.srcDirs += 'src/main/kotlin'
  }
}

buildscript {
    repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:0.9.66"
  }
}
repositories {
  mavenCentral()
}


robolectric {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'

    // configure max heap size of the test JVM
    maxHeapSize = '2048m'

    // configure whether failing tests should fail the build
    ignoreFailures true

    // use afterTest to listen to the test execution results
    afterTest { descriptor, result ->
        println "Executing test for {$descriptor.name} with result: ${result.resultType}"
    }
}